/**
 * Redes Integradas de Telecomunicacoes I MIEEC 2014/2015
 *
 * router.java
 *
 * Main class and graphic interface class with auxiliary functions
 *
 * Created on 7 de Setembro de 2014, 18:00
 *
 * @author Luis Bernardo
 */
package router;

import java.net.*;
import java.io.*;

/**
 * Main class and graphic interface class with auxiliary functions
 */
public class router extends javax.swing.JFrame {
    
    /** Packet's type codes */
    public final static byte PKT_HELLO = 1;
    public final static byte PKT_BYE = 2;
    public final static byte PKT_ROUTE = 10;
    public final static byte PKT_DATA = 20;
    /** Maximum valid distance for a route, above or equal is infinity */
    public final static int MAX_DISTANCE = 30;
    /** Maximum path length for a DATA packet */
    public final static int MAX_PATH_LEN = 10;
    
    /**
     * Constructor - creates a new form router
     */
    public router() {
        this.data_seq = 0;
        // Start main window
        initComponents();
        // Start neighbour list
        neig= new neighbourList(neigTable.getRowCount(), this);
        
        ds= null;
        daemon= null;
        route= null;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        editName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editIP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        editPort = new javax.swing.JTextField();
        tbuttonActive = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        neigTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonRem = new javax.swing.JButton();
        buttonMod = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        editNeigName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        editNeigDist = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        editNeigIP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        editNeigPort = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        checkSndIfChanges = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        editPeriod = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        editMinInterval = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jCheckBoxSplitH = new javax.swing.JCheckBox();
        jCheckBoxHolddown = new javax.swing.JCheckBox();
        editHoldownTime = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        routeTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        buttonSend = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        editDestName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        editMessage = new javax.swing.JTextField();
        buttonClear = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();

        setTitle("DV Router by 11111,22222,33333");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(360, 35));
        jPanel1.setMinimumSize(new java.awt.Dimension(320, 35));
        jPanel1.setPreferredSize(new java.awt.Dimension(360, 35));

        jLabel1.setText("Name");
        jPanel1.add(jLabel1);

        editName.setText("A");
        editName.setMaximumSize(new java.awt.Dimension(25, 25));
        editName.setMinimumSize(new java.awt.Dimension(18, 19));
        editName.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel1.add(editName);

        jLabel2.setText("IP");
        jPanel1.add(jLabel2);

        editIP.setText("127.0.0.1");
        editIP.setPreferredSize(new java.awt.Dimension(80, 25));
        jPanel1.add(editIP);

        jLabel3.setText("Port");
        jLabel3.setMaximumSize(new java.awt.Dimension(35, 15));
        jLabel3.setPreferredSize(new java.awt.Dimension(35, 15));
        jPanel1.add(jLabel3);

        editPort.setText("20000");
        jPanel1.add(editPort);

        tbuttonActive.setText("Active");
        tbuttonActive.setMargin(new java.awt.Insets(1, 2, 1, 2));
        tbuttonActive.setPreferredSize(new java.awt.Dimension(73, 25));
        tbuttonActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbuttonActiveActionPerformed(evt);
            }
        });
        jPanel1.add(tbuttonActive);

        getContentPane().add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(320, 140));
        jPanel2.setMinimumSize(new java.awt.Dimension(320, 75));
        jPanel2.setPreferredSize(new java.awt.Dimension(320, 75));
        jPanel2.setLayout(null);

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(300, 140));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 70));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 70));

        neigTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "IP", "Port", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        neigTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                neigTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(neigTable);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 5, 300, 70);

        getContentPane().add(jPanel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(320, 35));
        jPanel3.setMinimumSize(new java.awt.Dimension(320, 35));
        jPanel3.setPreferredSize(new java.awt.Dimension(320, 35));

        buttonAdd.setText("Add Neig");
        buttonAdd.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonAdd.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonAdd.setMinimumSize(new java.awt.Dimension(80, 25));
        buttonAdd.setPreferredSize(new java.awt.Dimension(90, 25));
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        jPanel3.add(buttonAdd);

        buttonRem.setText("Rem. Neig");
        buttonRem.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonRem.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonRem.setMinimumSize(new java.awt.Dimension(90, 25));
        buttonRem.setPreferredSize(new java.awt.Dimension(90, 26));
        buttonRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemActionPerformed(evt);
            }
        });
        jPanel3.add(buttonRem);

        buttonMod.setText("Mod. Neig");
        buttonMod.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonMod.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonMod.setMinimumSize(new java.awt.Dimension(80, 25));
        buttonMod.setPreferredSize(new java.awt.Dimension(90, 26));
        buttonMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModActionPerformed(evt);
            }
        });
        jPanel3.add(buttonMod);

        getContentPane().add(jPanel3);

        jPanel8.setMaximumSize(new java.awt.Dimension(360, 35));
        jPanel8.setMinimumSize(new java.awt.Dimension(360, 35));
        jPanel8.setPreferredSize(new java.awt.Dimension(360, 30));

        jLabel11.setText(" Name");
        jPanel8.add(jLabel11);

        editNeigName.setText("B");
        editNeigName.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel8.add(editNeigName);

        jLabel10.setText(" Dist.");
        jPanel8.add(jLabel10);

        editNeigDist.setText("1");
        editNeigDist.setMinimumSize(new java.awt.Dimension(20, 20));
        editNeigDist.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel8.add(editNeigDist);

        jLabel8.setText("IP");
        jPanel8.add(jLabel8);

        editNeigIP.setText("127.0.0.1");
        editNeigIP.setToolTipText("");
        editNeigIP.setMaximumSize(new java.awt.Dimension(200, 25));
        editNeigIP.setMinimumSize(new java.awt.Dimension(80, 20));
        editNeigIP.setPreferredSize(new java.awt.Dimension(80, 25));
        jPanel8.add(editNeigIP);

        jLabel9.setText("Port");
        jLabel9.setMaximumSize(new java.awt.Dimension(35, 15));
        jLabel9.setPreferredSize(new java.awt.Dimension(35, 15));
        jPanel8.add(jLabel9);

        editNeigPort.setText("20000");
        editNeigPort.setMinimumSize(new java.awt.Dimension(45, 20));
        editNeigPort.setPreferredSize(new java.awt.Dimension(54, 25));
        jPanel8.add(editNeigPort);

        getContentPane().add(jPanel8);

        jPanel7.setMaximumSize(new java.awt.Dimension(370, 30));
        jPanel7.setMinimumSize(new java.awt.Dimension(360, 30));
        jPanel7.setPreferredSize(new java.awt.Dimension(370, 30));

        checkSndIfChanges.setText("Send if change");
        checkSndIfChanges.setMaximumSize(new java.awt.Dimension(135, 23));
        checkSndIfChanges.setMinimumSize(new java.awt.Dimension(130, 23));
        checkSndIfChanges.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel7.add(checkSndIfChanges);

        jLabel6.setText("Period");
        jPanel7.add(jLabel6);

        editPeriod.setText("5");
        editPeriod.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel7.add(editPeriod);

        jLabel7.setText("Min Interval");
        jLabel7.setMaximumSize(new java.awt.Dimension(90, 20));
        jLabel7.setMinimumSize(new java.awt.Dimension(80, 20));
        jLabel7.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel7.add(jLabel7);

        editMinInterval.setText("1");
        editMinInterval.setMaximumSize(new java.awt.Dimension(20, 25));
        editMinInterval.setMinimumSize(new java.awt.Dimension(20, 19));
        editMinInterval.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel7.add(editMinInterval);

        getContentPane().add(jPanel7);

        jPanel9.setMaximumSize(new java.awt.Dimension(330, 30));
        jPanel9.setMinimumSize(new java.awt.Dimension(330, 30));
        jPanel9.setPreferredSize(new java.awt.Dimension(330, 30));

        jCheckBoxSplitH.setSelected(true);
        jCheckBoxSplitH.setText("Split Horizon");
        jPanel9.add(jCheckBoxSplitH);

        jCheckBoxHolddown.setText("Hold down");
        jPanel9.add(jCheckBoxHolddown);

        editHoldownTime.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        editHoldownTime.setText("5");
        editHoldownTime.setMaximumSize(new java.awt.Dimension(21, 25));
        editHoldownTime.setMinimumSize(new java.awt.Dimension(15, 19));
        editHoldownTime.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel9.add(editHoldownTime);

        getContentPane().add(jPanel9);

        jPanel4.setMaximumSize(new java.awt.Dimension(320, 200));
        jPanel4.setMinimumSize(new java.awt.Dimension(320, 120));
        jPanel4.setPreferredSize(new java.awt.Dimension(320, 120));
        jPanel4.setLayout(null);

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setMaximumSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(300, 115));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 115));

        routeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Destination", "Router", "Distance", "Holddown"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        routeTable.setMaximumSize(new java.awt.Dimension(300, 500));
        routeTable.setMinimumSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setViewportView(routeTable);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(10, 5, 300, 115);

        getContentPane().add(jPanel4);

        jPanel5.setMaximumSize(new java.awt.Dimension(350, 40));
        jPanel5.setMinimumSize(new java.awt.Dimension(350, 35));
        jPanel5.setPreferredSize(new java.awt.Dimension(350, 40));

        buttonSend.setText("Send");
        buttonSend.setMargin(new java.awt.Insets(2, 5, 2, 5));
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });
        jPanel5.add(buttonSend);

        jLabel4.setText("Dest:");
        jPanel5.add(jLabel4);

        editDestName.setText("A");
        editDestName.setMaximumSize(new java.awt.Dimension(20, 25));
        editDestName.setMinimumSize(new java.awt.Dimension(16, 20));
        editDestName.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanel5.add(editDestName);

        jLabel5.setText("Msg:");
        jLabel5.setMaximumSize(new java.awt.Dimension(35, 20));
        jLabel5.setMinimumSize(new java.awt.Dimension(35, 15));
        jLabel5.setPreferredSize(new java.awt.Dimension(35, 20));
        jPanel5.add(jLabel5);

        editMessage.setText("test 1");
        editMessage.setMaximumSize(new java.awt.Dimension(90, 25));
        editMessage.setMinimumSize(new java.awt.Dimension(90, 19));
        editMessage.setPreferredSize(new java.awt.Dimension(90, 25));
        jPanel5.add(editMessage);

        buttonClear.setText("Clear");
        buttonClear.setMargin(new java.awt.Insets(2, 5, 2, 5));
        buttonClear.setMaximumSize(new java.awt.Dimension(60, 31));
        buttonClear.setPreferredSize(new java.awt.Dimension(60, 31));
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });
        jPanel5.add(buttonClear);

        getContentPane().add(jPanel5);

        jPanel6.setMaximumSize(new java.awt.Dimension(320, 180));
        jPanel6.setMinimumSize(new java.awt.Dimension(320, 100));
        jPanel6.setPreferredSize(new java.awt.Dimension(320, 180));
        jPanel6.setLayout(null);

        jScrollPane3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jScrollPane3.setMaximumSize(new java.awt.Dimension(301, 175));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(301, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(301, 175));
        jScrollPane3.setAutoscrolls(true);

        logText.setEditable(false);
        logText.setColumns(20);
        logText.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        logText.setMaximumSize(new java.awt.Dimension(180, 400));
        logText.setMinimumSize(new java.awt.Dimension(180, 100));
        logText.setPreferredSize(new java.awt.Dimension(180, 400));
        logText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                logTextKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(logText);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(9, 5, 301, 175);

        getContentPane().add(jPanel6);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle key pressing in the log window
     * @param evt graphical event
     */
    private void logTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logTextKeyPressed
        // Add your handling code here:
        if (evt.getKeyChar() == 's')
            write_statistics();
        if (evt.getKeyChar() == 'z')
            zero_statistics();
    }//GEN-LAST:event_logTextKeyPressed

    /** 
     * Updates edit windows with selected line data 
     * @param evt graphical event
     */
    private void neigTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_neigTableMouseClicked
        int row= neigTable.getSelectedRow();
        if (row == -1) { // Line not selected
            return;
        }
        for (int i= 0; i<4; i++) {
            String s= (String)neigTable.getValueAt(row, i);
            if (s == null)
                return;
            switch (i) {
                case 0: editNeigName.setText(s); break;
                case 1: editNeigIP.setText(s); break;
                case 2: editNeigPort.setText(s); break;
                case 3: editNeigDist.setText(s); break;
            }
        }
    }//GEN-LAST:event_neigTableMouseClicked

    /** 
     * Handle "Clear" button - clear the log window contents 
     * @param evt graphical event
     */
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        logText.setText("");
    }//GEN-LAST:event_buttonClearActionPerformed

    /**
     * Handle "Send" button - send a DATA test packet 
     * @param evt graphical event
     */
    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        synchronized (main_lock) {
            route.send_data_packet(local_name(), editDestName.getText().charAt(0), 
                ++data_seq, editMessage.getText(), "");
        }
    }//GEN-LAST:event_buttonSendActionPerformed

    /** 
     * Handle button "Mod. Neig" - changes the distance to the neighbour 
     * @param evt graphical event
     */
    private void buttonModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        if (neig.locate_neig(editNeigName.getText().charAt(0)) == null) {
            Log("Invalid neighbour\n");
            return;
        }
        try {
            synchronized (main_lock) {
                if (neig.update_neig(editNeigName.getText().charAt(0), 
                              editNeigIP.getText(), 
                              Integer.parseInt(editNeigPort.getText()),
                              Integer.parseInt(editNeigDist.getText()))) { 
                    neig.refresh_table(neigTable);
                    if (checkSndIfChanges.isSelected()) {
                        route.network_changed(true);
                    }
                }
            }
        }
        catch (NumberFormatException e) { 
            Log("Invalid number\n");
        }
    }//GEN-LAST:event_buttonModActionPerformed

    /** 
     * Handle button "Rem. neig" - Removes a neighbour from the list 
     * @param evt graphical event
     */
    private void buttonRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        if (neig.locate_neig(editNeigName.getText().charAt(0)) == null) {
            Log("Invalid neighbour\n");
            return;
        }
        synchronized (main_lock) {
            if (neig.del_neig(editNeigName.getText().charAt(0), true, ds)) {
                neig.refresh_table(neigTable);
                if (checkSndIfChanges.isSelected()) {
                    route.network_changed(true);
                }
            }
        }
    }//GEN-LAST:event_buttonRemActionPerformed

    /** 
     * Handle "Add Neig" button - Adds a new neighbour to the list 
     * @param evt graphical event
     */
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        String new_name= editNeigName.getText();
        if (new_name.length()>1 || !Character.isUpperCase(new_name.charAt(0))) {
            Log("Invalid name '"+new_name+"'\n");
            return;
        }
        if (neig.locate_neig(new_name.charAt(0)) != null) {
            Log("Duplicate name\n");
            return;            
        }
        synchronized (main_lock) {
            try {
                if (neig.add_neig(new_name.charAt(0), 
                              editNeigIP.getText(), 
                              Integer.parseInt(editNeigPort.getText()),
                              Integer.parseInt(editNeigDist.getText()),
                              ds)) {
                    neig.refresh_table(neigTable);
                    if (checkSndIfChanges.isSelected()) {
                        route.network_changed(true);
                    }
                }
            }
            catch (NumberFormatException e) { 
                Log("Invalid number\n");
            }
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    /** 
     * Handle "Active" button - Activates or stops the router 
     * @param evt graphical event
     */
    private void tbuttonActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbuttonActiveActionPerformed
        if (tbuttonActive.isSelected()) {
            // Start router
            boolean active= false;
            try {
                int port= Integer.parseInt(editPort.getText());
                char c= editName.getText().charAt(0);              
                int period= Integer.parseInt(editPeriod.getText());
                int minInterval= Integer.parseInt(editMinInterval.getText());
                int holddownTime= Integer.parseInt (editHoldownTime.getText());
                do {
                    try {
                        ds= new DatagramSocket(port);
                        active= true;
                    }
                    catch (SocketException se) {
                        // Skip to next letter
                        port++;
                        c++;
                    }
                } while (!active && (c<='Z'));
                
                if (!active) {
                    Log("All letters ('A'-'Z') occupied\n");
                    tbuttonActive.setSelected(false);
                    return;
                }
                 // Update edit boxes
                editPort.setText(""+port);
                editName.setText(""+c);
                editIP.setText(InetAddress.getLocalHost().getHostAddress());
                editDestName.setText (""+c);
                if (c<'Z') c++; else c--;
                editNeigName.setText(""+c);
                editNeigPort.setText(""+(port+1));
                editNeigIP.setText(InetAddress.getLocalHost().getHostAddress());
                                
                // Start routing timer
                route= new routing(local_name(), neig, period, minInterval, 
                    jCheckBoxSplitH.isSelected(), jCheckBoxHolddown.isSelected(), 
                    holddownTime, this, ds, routeTable);
                if (!route.start()) {
                    Log("Failed to boot the routing object\n");
                    ds.close();
                    ds= null;
                    tbuttonActive.setSelected(false);
                    return;
                }
                // Start daemon thread
                daemon= new Daemon(ds);
                daemon.start();
                // Lock entry windows
                editName.setEditable(false);
                jCheckBoxSplitH.setEnabled(false);
                jCheckBoxHolddown.setEnabled(false);
                editHoldownTime.setEnabled(false);
                editPort.setEditable(false);
                editIP.setEditable(false);
                editPeriod.setEditable(false);
                editMinInterval.setEditable(false);
                //
                zero_statistics();
            }
            catch (UnknownHostException e) {
                Log("Localhost Unknown: "+e+"\n");
                tbuttonActive.setSelected(false);
            }
            catch (NumberFormatException e) {
                Log("Invalid port number or period: "+e+"\n");
                tbuttonActive.setSelected(false);
            }
            
        } else {
            // Stop router
            stop_router();
        }
    }//GEN-LAST:event_tbuttonActiveActionPerformed
    
    /**
     * Handle the exit window event - exits the application
     * @param evt graphical event
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        if (tbuttonActive.isSelected())
            stop_router();
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /** 
     * Stops the router 
     */
    private void stop_router() {
        if (daemon != null) {
            daemon.stopRunning();
            daemon= null;
        }
        if (route != null) {
            route.stop();
            route= null;
        }
        if (ds != null) {
            neig.clear_BYE(ds);
            neig.refresh_table(neigTable);
            ds.close();
            ds= null;
        }
        if (tbuttonActive.isSelected()) {
            Log("Router "+local_name()+" stopped\n");
        }
        editName.setEditable(true);
        jCheckBoxSplitH.setEnabled(true);
        jCheckBoxHolddown.setEnabled(true);
        editHoldownTime.setEnabled(true);
        editPort.setEditable(true);
        editIP.setEditable(true);
        editPeriod.setEditable(true);
        editMinInterval.setEditable(true);
    }

    /**
     * Test if SndIfChanges is selected
     * @return true if SndIfChanges is selected
     */
    public boolean is_sendIfChanges() {
        return checkSndIfChanges.isSelected();
    }
    
    /**
     * Get the node name from the form
     * @return local name (address)
     */
    public char local_name() {
        try {
            return editName.getText().charAt(0);
        }
        catch(Exception e) {
            Log("Local name error: "+e);
        }
        return '*';
    }
    
    /**
     * Test if nm is the local name
     * @param nm test name
     * @return true if names are equal, false otherwise
     */
    public boolean is_local_name(char nm) {
        return (nm == local_name());
    }


    /**
     * handle incoming packets, decoding and processing HELLO and BYE packets
     * @param dp    datagram packet
     * @param dis   input stream
     * @return true if packet was processed with success, false otherwise
     */
    boolean process_packet(DatagramPacket dp, DataInputStream dis) {
        byte code;
        char sender;
        try {
            code= dis.readByte();     // read code
            sender= dis.readChar();   // read sender id
            String ip= dp.getAddress().getHostAddress();  // Get sender address            
            if (ip.startsWith("127.")) {
                try {
                    ip= InetAddress.getLocalHost().getHostAddress();
                }
                catch (UnknownHostException e) {
                    Log("Error converting address '127.*'\n");
                    return false;
                }
            }
            
            switch(code) {
                case PKT_HELLO:
                    Log("PKT_HELLO("+sender+")\n");
                    HELLO_rcv++;
                    // Update values
                    int dist= dis.readInt();
                    if (dis.available() != 0) {
                        Log("Packet too long\n");
                        return false;
                    }
                    if (tbuttonActive.isSelected()) {
                        boolean ok= neig.add_neig(sender, ip, dp.getPort(), 
                            dist, ds);
                        if (ok) {
                            neig.refresh_table(neigTable);
                            if (is_sendIfChanges()) {
                                route.network_changed(true);
                            }
                        }
                    }
                    break;
                    
                case PKT_BYE:
                    Log("PKT_BYE("+sender+")\n");
                    BYE_rcv++;
                    if (dis.available() != 0) {
                        Log("Packet too long\n");
                        return false;
                    }
                    if (tbuttonActive.isSelected()) {
                        boolean ok= neig.del_neig(sender, false, ds);
                        if (ok) {
                            neig.refresh_table(neigTable);
                            if (is_sendIfChanges())
                                route.network_changed(true);                            
                        }
                    }
                    break;
                    
                case PKT_ROUTE:
                    ROUTE_rcv++; 
                    return route.process_ROUTE(sender, dp, ip, dis);
                    
                case PKT_DATA:
                    DATA_rcv++;
                    return route.process_DATA(sender, dp, ip, dis);
                    
                default:
                    Log("Invalid packet code ("+code+")\n");
                    INVALID_rcv++;
                    return false;
                }
            }
            catch(IOException e) {
                Log("Packet too short\n");
                return false;
            }
            return true;
    }

    
/**************************************************************/
    
    
    /** 
     * Thread that handles socket events 
     */
    public class Daemon extends Thread {
        volatile boolean keepRunning= true;
        DatagramSocket ds;
        
        /** Constructor */
        Daemon(DatagramSocket ds) {
            this.ds= ds;
        }
        
        // Thread main function
        @Override
        public void run() {
            byte [] buf= new byte[8096];
            DatagramPacket dp= new DatagramPacket(buf, buf.length);
            try {
                while (keepRunning) {
                    try {
                        ds.receive(dp);
                        ByteArrayInputStream BAis= 
                            new ByteArrayInputStream(buf, 0, dp.getLength());
                        DataInputStream dis= new DataInputStream(BAis);
                        System.out.println("Received packet ("+dp.getLength()+
                            ") from " + dp.getAddress().getHostAddress() +
                            ":" +dp.getPort());
                        
                        synchronized (main_lock) {
                            process_packet(dp, dis);
                        }
                    }
                    catch (SocketException se) {
                        if (keepRunning)
                            Log("recv UDP SocketException : " + se + "\n");
                    }
                }
            }
            catch(IOException e) {
                if (keepRunning)
                    Log("IO exception receiving data from socket : " + e);
            }
        }
        
        // Stops thread
        public void stopRunning() {
            keepRunning= false;
        }
    }


    
   /**
     * main function of the router program
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new router().setVisible(true);
    }
    
    /**
     * Write messages in the log window and in the command line
     * @param s  message to write
     */
    public void Log(final java.lang.String s) {
        logText.append(s);
        System.out.print(s);
    }         

    /** 
     * Clear statistics 
     */
    public void zero_statistics() {
        HELLO_snt= 0;
        HELLO_rcv= 0;
        BYE_snt= 0;
        BYE_rcv= 0;
        ROUTE_snt= 0;
        ROUTE_rcv= 0;
        DATA_snt= 0;
        DATA_rcv= 0;
        INVALID_rcv= 0;
    }

    /** 
     * Write statistics 
     */
    public void write_statistics() {
        Log("****Statistics**********************************************\n"+
            "HELLO snt:"+HELLO_snt+" rcv:"+HELLO_rcv+
            "; BYE snt:"+BYE_snt+" rcv:"+BYE_rcv+
            "\nROUTE snt:"+ROUTE_snt+" rcv:"+ROUTE_rcv+
            "; DATA snt:"+DATA_snt+" rcv:"+DATA_rcv+
            "; Invalid rcv:"+INVALID_rcv+"\n"+
            "************************************************************\n");
    }

    
    ////////////////////////////////////////////////////////////////////

    
    /** Synchronization lock */
    final public Integer main_lock= new Integer(0);
    
    /** Datagram socket */
    private DatagramSocket ds;
    /** Socket daemon */
    private Daemon daemon;
    /** neighbour list */
    private final neighbourList neig;
    /** routing object */
    private routing route;
    /** Sequence number for data packets */
    private int data_seq;
    
    /* Statistics counters */
    public int HELLO_snt;
    public int HELLO_rcv;
    public int BYE_snt;
    public int BYE_rcv;
    public int ROUTE_snt;   // only counts local routing
    public int ROUTE_rcv;
    public int DATA_snt;
    public int DATA_rcv;
    public int INVALID_rcv;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton buttonAdd;
    javax.swing.JButton buttonClear;
    javax.swing.JButton buttonMod;
    javax.swing.JButton buttonRem;
    javax.swing.JButton buttonSend;
    javax.swing.JCheckBox checkSndIfChanges;
    javax.swing.JTextField editDestName;
    javax.swing.JTextField editHoldownTime;
    javax.swing.JTextField editIP;
    javax.swing.JTextField editMessage;
    javax.swing.JTextField editMinInterval;
    javax.swing.JTextField editName;
    javax.swing.JTextField editNeigDist;
    javax.swing.JTextField editNeigIP;
    javax.swing.JTextField editNeigName;
    javax.swing.JTextField editNeigPort;
    javax.swing.JTextField editPeriod;
    javax.swing.JTextField editPort;
    javax.swing.JCheckBox jCheckBoxHolddown;
    javax.swing.JCheckBox jCheckBoxSplitH;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel11;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JPanel jPanel3;
    javax.swing.JPanel jPanel4;
    javax.swing.JPanel jPanel5;
    javax.swing.JPanel jPanel6;
    javax.swing.JPanel jPanel7;
    javax.swing.JPanel jPanel8;
    javax.swing.JPanel jPanel9;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JScrollPane jScrollPane3;
    javax.swing.JTextArea logText;
    javax.swing.JTable neigTable;
    javax.swing.JTable routeTable;
    javax.swing.JToggleButton tbuttonActive;
    // End of variables declaration//GEN-END:variables
}
